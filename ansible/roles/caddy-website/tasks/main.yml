---
- name: install | install dependencies
  apt:
    name: "{{ packages }}"
    state: present
    update_cache: yes
  vars:
    packages:
     - git
     - golang

- name: clone website from repo
  git:
    repo: "{{ hugo_website_git_repo }}"
    dest: "{{ hugo_src_website }}"

- name: ensure paths exist
  file:
    path: "{{ item }}"
    state: directory
  with_items:
    - "{{ hugo_src_website }}"
    - "{{ caddy_path }}"

- name: create temporary public directory
  tempfile:
    state: directory
  register: tmp_public

- name: build hugo website in container "{{ hugo_docker_image }}"
  docker_container:
    name: hugo-build-magma
    image: "{{ hugo_docker_image }}"
    volumes:
      - "{{ hugo_src_website }}:/src"
      - "{{ tmp_public.path }}:/output"

# XXX Replace with the git repo of the website
- name: copy public build website to caddy webroot
  synchronize:
    delete: yes
    recursive: yes
    src: "{{ tmp_public.path }}/"
    dest: "{{ caddy_website_root }}/"
  delegate_to: "{{ inventory_hostname }}"

- name: template files
  template:
    src: "{{ item }}.j2"
    dest: "{{ caddy_path }}/{{ item }}"
  with_items:
    - Caddyfile
#    - docker-compose.yml
#    - Dockerfile
#  register: template_files

#- name: build caddy docker image
#  docker_image:
#    name: caddy
#    tag: local
#    path: '{{ caddy_path }}'
#    state: present

#- name: docker compose caddy
#  docker_compose:
#    project_src: '{{ caddy_path }}'
#    state: present
#    build: yes
#    restarted: yes

#- name: build caddy docker service
#  command: docker-compose build --force-rm --no-cache
#  args:
#    chdir: "{{ caddy_path }}"
#  when: template_files.changed

#- name: bring up caddy docker service
#  command: docker-compose up -d
#  args:
#    chdir: "{{ caddy_path }}"

##
# Build caddy from source
##

# FIXME either verify signatures or compile from source
- name: install caddy script
  raw: curl https://getcaddy.com | bash -s personal http.filter
  become: yes

- name: create systemd configuration
  template:
    src: etc/systemd/system/caddy.service.j2
    dest: /etc/systemd/system/caddy.service
    owner: root
    group: root
    mode: 0655
  become: yes
  notify:
    - "restart caddy"

- name: check that we can connect to hosts and get a status 200
  uri:
    url: "{{ item }}"
  with_items:
    - "{{ website_host }}"
